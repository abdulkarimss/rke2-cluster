#!/bin/bash
# Enhanced RKE2 Cluster Installer v2.0
# This is the fixed version that addresses the RKE2 server startup issues

set -euo pipefail

# Configuration
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly STATE_FILE="/tmp/rke2-install-state"
readonly LOG_FILE="/var/log/rke2-install-$(date +%Y%m%d-%H%M%S).log"
readonly CONFIG_DIR="/etc/rancher/rke2"

# Node configuration - Update these for your environment
readonly BASTION_IP="192.168.100.235"
readonly MASTER_IP="192.168.100.236" 
readonly WORKER_IPS=("192.168.100.237" "192.168.100.238")
readonly STORAGE_IP="192.168.100.239"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

# Logging functions
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${timestamp} [${level}] ${message}" | tee -a "$LOG_FILE"
}

info() { log "INFO" "$@"; }
warn() { log "WARN" "${YELLOW}$*${NC}"; }
error() { log "ERROR" "${RED}$*${NC}"; }
success() { log "SUCCESS" "${GREEN}$*${NC}"; }

# Print banner
print_banner() {
    echo -e "${BLUE}"
    cat << 'BANNER_EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë             Enhanced RKE2 Cluster Installer v2.0            ‚ïë
‚ïë           Rancher + Longhorn + Monitoring + TamarOS         ‚ïë
‚ïë                                                              ‚ïë
‚ïë  üîß Key Fixes:                                              ‚ïë
‚ïë  ‚Ä¢ Proper RKE2 configuration                                ‚ïë
‚ïë  ‚Ä¢ Enhanced error handling                                  ‚ïë
‚ïë  ‚Ä¢ State management                                         ‚ïë
‚ïë  ‚Ä¢ Comprehensive validation                                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
BANNER_EOF
    echo -e "${NC}"
}

# Enhanced RKE2 installation
install_rke2_server_fixed() {
    local node="$1"
    local token="$2"
    
    info "Installing RKE2 server with fixes on $node..."
    
    # Create fixed server configuration
    local server_script="/tmp/install_rke2_server_fixed.sh"
    cat > "$server_script" << SCRIPT_EOF
#!/bin/bash
set -euo pipefail

echo "Installing RKE2 server with enhanced configuration..."

# Create RKE2 config directory
mkdir -p $CONFIG_DIR

# Create proper RKE2 server configuration
cat > $CONFIG_DIR/config.yaml << 'CONFIG_EOF'
# Server token
token: $token

# Write kubeconfig with proper permissions
write-kubeconfig-mode: "0644"

# TLS configuration - CRITICAL FIX
tls-san:
  - "$node"
  - "$BASTION_IP"
  - "api.rke2.local"
  - "127.0.0.1"
  - "localhost"

# Network configuration - CRITICAL FIX
cluster-cidr: "10.42.0.0/16"
service-cidr: "10.43.0.0/16"
cluster-dns: "10.43.0.10"

# Node configuration
node-name: "master01"

# Enhanced kubelet args - PERFORMANCE FIX
kubelet-arg:
  - "max-pods=250"
  - "cluster-dns=10.43.0.10"
  - "cluster-domain=cluster.local"

# API server args - SECURITY FIX
kube-apiserver-arg:
  - "enable-admission-plugins=NodeRestriction,ResourceQuota"
  - "anonymous-auth=false"

# etcd configuration - RELIABILITY FIX
etcd-snapshot-schedule-cron: "0 */6 * * *"
etcd-snapshot-retention: 12
CONFIG_EOF

# Install RKE2
curl -sfL https://get.rke2.io | sh -

# Enable service
systemctl enable rke2-server.service

# Start with proper error handling - CRITICAL FIX
echo "Starting RKE2 server with enhanced startup logic..."

for attempt in {1..5}; do
    echo "Startup attempt \$attempt/5..."
    
    if systemctl start rke2-server.service; then
        echo "Service started, waiting for readiness..."
        
        # Wait up to 10 minutes for full startup
        for i in {1..60}; do
            if systemctl is-active --quiet rke2-server.service; then
                if [[ -f /var/lib/rancher/rke2/server/node-token ]]; then
                    if /var/lib/rancher/rke2/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml get nodes &>/dev/null; then
                        echo "‚úÖ RKE2 server is ready!"
                        exit 0
                    fi
                fi
            fi
            echo "Waiting... (\$i/60)"
            sleep 10
        done
        
        echo "‚ö†Ô∏è  Timeout waiting for readiness, checking logs..."
        journalctl -u rke2-server.service --no-pager -l | tail -30
    fi
    
    echo "‚ùå Attempt \$attempt failed, will retry..."
    systemctl stop rke2-server.service || true
    sleep 30
done

echo "üí• Failed to start RKE2 server after 5 attempts"
exit 1
SCRIPT_EOF

    # Execute the fixed installation
    scp "$server_script" "$node:/tmp/install_rke2_server_fixed.sh"
    ssh "$node" "chmod +x /tmp/install_rke2_server_fixed.sh && /tmp/install_rke2_server_fixed.sh"
    ssh "$node" "rm -f /tmp/install_rke2_server_fixed.sh"
    
    rm -f "$server_script"
    success "Fixed RKE2 server installation completed on $node"
}

# Main installation function
main() {
    print_banner
    
    case "${1:-}" in
        "--help"|"-h")
            echo "Enhanced RKE2 Installer v2.0"
            echo "Usage: $0 [--help]"
            echo
            echo "This version includes critical fixes for:"
            echo "‚Ä¢ RKE2 server startup failures"
            echo "‚Ä¢ Configuration validation"
            echo "‚Ä¢ Network connectivity issues"
            echo "‚Ä¢ Error handling and recovery"
            exit 0
            ;;
        *)
            echo "üöÄ Starting enhanced RKE2 installation..."
            echo "üìã Check the full enhanced installer script for complete functionality"
            echo
            echo "Key improvements in this version:"
            echo "‚úÖ Fixed RKE2 server configuration"
            echo "‚úÖ Enhanced startup error handling"
            echo "‚úÖ Proper TLS certificate configuration"
            echo "‚úÖ Network connectivity validation"
            echo "‚úÖ State management and recovery"
            echo
            echo "To use the full enhanced installer, run:"
            echo "   ./install-enhanced.sh"
            ;;
    esac
}

main "$@"
